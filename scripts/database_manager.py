# scripts/database_manager.py
import oracledb
import os
import pandas as pd
from dotenv import load_dotenv

# Load environment variables from a .env file
load_dotenv()

class OracleDBManager:
    """
    Manages connection to and data insertion into an Oracle database.
    """
    def __init__(self):
        try:
            self.user = os.getenv("ORACLE_DB_USER")
            self.password = os.getenv("ORACLE_DB_PASSWORD")
            self.dsn = os.getenv("ORACLE_DB_DSN")
            self.connection = None
        except KeyError:
            print("Error: Oracle database environment variables are not set.")
            raise

    def connect(self):
        """Establishes a connection to the Oracle database."""
        try:
            self.connection = oracledb.connect(
                user=self.user,
                password=self.password,
                dsn=self.dsn
            )
            print("✅ Successfully connected to Oracle Database.")
            return self.connection
        except oracledb.Error as e:
            print(f"Error connecting to Oracle Database: {e}")
            self.connection = None
            return None

    def create_tables(self):
        """Creates the BANKS and REVIEWS tables if they don't exist."""
        cursor = self.connection.cursor()
        try:
            # Create Banks table
            cursor.execute("""
                CREATE TABLE Banks (
                    bank_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    bank_name VARCHAR2(100) UNIQUE NOT NULL
                )
            """)
            print("✅ Created 'Banks' table.")

            # Create Reviews table
            cursor.execute("""
                CREATE TABLE Reviews (
                    review_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
                    review_text CLOB NOT NULL,
                    rating NUMBER(1,0) NOT NULL,
                    review_date DATE NOT NULL,
                    sentiment_score NUMBER(5, 4),
                    sentiment VARCHAR2(10),
                    theme VARCHAR2(255),
                    bank_id NUMBER NOT NULL,
                    CONSTRAINT fk_bank FOREIGN KEY (bank_id) REFERENCES Banks(bank_id)
                )
            """)
            print("✅ Created 'Reviews' table.")
            self.connection.commit()
        except oracledb.Error as e:
            error, = e.args
            if error.code == 955: # ORA-00955: name is already used by an existing object
                print("Tables already exist. Skipping creation.")
            else:
                print(f"Error creating tables: {e}")
                self.connection.rollback()
        finally:
            cursor.close()

    def insert_data(self, df):
        """Inserts data from a DataFrame into the database."""
        if self.connection is None:
            print("Error: No database connection.")
            return

        cursor = self.connection.cursor()

        try:
            # Insert banks first to get their IDs
            banks = df['bank_name'].unique()
            bank_ids = {}
            for bank_name in banks:
                cursor.execute("SELECT bank_id FROM Banks WHERE bank_name = :1", [bank_name])
                result = cursor.fetchone()
                if not result:
                    cursor.execute("INSERT INTO Banks (bank_name) VALUES (:1) RETURNING bank_id INTO :2", [bank_name, cursor.var(int)])
                    bank_id = cursor.bindvars[1].getvalue()[0]
                    bank_ids[bank_name] = bank_id
                else:
                    bank_ids[bank_name] = result[0]
            self.connection.commit()
            print("✅ Banks data inserted successfully.")

            # Prepare data for bulk insertion into Reviews table
            review_data = []
            for _, row in df.iterrows():
                review_data.append((
                    row['review_text'],
                    int(row['rating']),
                    row['date'],
                    row.get('sentiment_score'),
                    row.get('sentiment'),
                    row.get('theme'),
                    bank_ids[row['bank_name']]
                ))

            # Bulk insert
            cursor.executemany("INSERT INTO Reviews (review_text, rating, review_date, sentiment_score, sentiment, theme, bank_id) VALUES (:1, :2, TO_DATE(:3, 'YYYY-MM-DD'), :4, :5, :6, :7)", review_data)
            self.connection.commit()
            print(f"✅ Successfully inserted {len(review_data)} reviews.")
        except oracledb.Error as e:
            print(f"Error inserting data: {e}")
            self.connection.rollback()
        finally:
            cursor.close()

    def close(self):
        """Closes the database connection."""
        if self.connection:
            self.connection.close()
            print("✅ Database connection closed.")

if __name__ == "__main__":
    print("This script is a library. Please import it to use its functions.")